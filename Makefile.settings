#### STANDARD SETTINGS ####

# Filenames
RELEASE_COMPOSE_FILE := docker/release/docker-compose.yml

# Docker Compose Project Names
RELEASE_PROJECT := $(PROJECT_NAME)$(BUILD_ID)

export MY_IP_ADDRESS ?= $(shell curl -s http://checkip.amazonaws.com)/32
export TIMESTAMP := $(shell date +%Y%m%d%H%M%S)

# Transforms Packer manifest.json to more structured output
transform_manifest = cat $(1) \
	| jq '.builds | map( . as $$o | .artifact_id | split(",")) \
	| map( . as $$o | .[] | split(":") | {(.[0]): (.[1])}) \
	| reduce .[] as $$o ( {}; ($$o|keys[0]) as $$key \
	| . + { ($$key): (.[$$key] + $$o[$$key]) } )' > $(2)

# Shell function that includes error handling 
define shell
	$(shell $(1))
	$(if $(filter $(.SHELLSTATUS),0),,$(error An error occurred executing a shell command))
	$(info executed command: $(1))
endef

# AWS ECS metadata settings
# Attempts to obtain ECS task definition IAM role credentials
# Syntax: $(call get_ecs_credentials)
get_ecs_credentials = curl --connect-timeout 5 -fs http://169.254.170.2$$AWS_CONTAINER_CREDENTIALS_RELATIVE_URI
get_ecs_credential = jq --null-input '$(1)' | jq .$(2) -r
define ecs_credentials
	$(eval ECS_CREDENTIALS = $(shell $(get_ecs_credentials)))
	$(if $(ECS_CREDENTIALS),$(eval export AWS_ACCESS_KEY_ID ?= $(shell $(call get_ecs_credential,$(ECS_CREDENTIALS),AccessKeyId))))
	$(if $(ECS_CREDENTIALS),$(eval export AWS_SECRET_ACCESS_KEY ?= $(shell $(call get_ecs_credential,$(ECS_CREDENTIALS),SecretAccessKey))))
	$(if $(ECS_CREDENTIALS),$(eval export AWS_SESSION_TOKEN ?= $(shell $(call get_ecs_credential,$(ECS_CREDENTIALS),Token))))
endef

# AWS assume role settings
# Conditionally attempts to assume IAM role using STS
# Syntax: $(call assume_role,<role-arn>)
get_assume_session = aws sts assume-role --role-arn=$(1) --role-session-name=admin
get_assume_credential = jq --null-input '$(1)' | jq .Credentials.$(2) -r
define assume_role
	$(eval AWS_SESSION = $(shell $(call get_assume_session,$(1))))
	$(eval export AWS_ACCESS_KEY_ID ?= $(shell $(call get_assume_credential,$(AWS_SESSION),AccessKeyId)))
	$(eval export AWS_SECRET_ACCESS_KEY ?= $(shell $(call get_assume_credential,$(AWS_SESSION),SecretAccessKey)))
	$(eval export AWS_SESSION_TOKEN ?= $(shell $(call get_assume_credential,$(AWS_SESSION),SessionToken)))
endef

# AWS temporary security group for Packer SSH access
# Syntax: $(call create_packer_security_group,<group-name>,<group-description>,<allowed-cidr>)
# Syntax: $(call delete_packer_security_group,<group-name>)
delete_packer_security_group = aws ec2 delete-security-group --group-name $(1)
create_security_group = aws ec2 create-security-group --group-name $(1) --description $(2) | jq .GroupId -r
define create_packer_security_group
	$(eval export AWS_SECURITY_GROUP_ID = $(shell $(call create_security_group,$(1),$(2))))
	aws ec2 authorize-security-group-ingress --group-id $(AWS_SECURITY_GROUP_ID) --protocol tcp --port 22 --cidr $(3)
endef

# Arguments
RELEASE_ARGS = -p $(RELEASE_PROJECT) -f $(RELEASE_COMPOSE_FILE) $(VERBOSE_FLAG)
VERBOSE_FLAG = $(if $(VERBOSE),--verbose,)
PULL_FLAG = $(if $(findstring false,$(PULL)),,--pull)

# Set shell
SHELL=/bin/bash -e -o pipefail

# App version settings
ifdef APP_VERSION
	export APP_VERSION
else
	COMMIT_ID := $(shell git rev-parse --short HEAD)
	export APP_VERSION ?= $(TIMESTAMP).$(COMMIT_ID)$(if $(BUILD_ID),.$(BUILD_ID),)
endif

# Docker host settings
DOCKER_HOST_IP := $(shell echo $$DOCKER_HOST | awk -F/ '{printf $$3}' | awk -F: '{printf $$1}')

# Cosmetics
RED := "\e[1;31m"
YELLOW := "\e[1;33m"
NC := "\e[0m"
INFO := @bash -c 'printf $(YELLOW); echo "=> $$1"; printf $(NC)' MESSAGE
WARNING := @bash -c 'printf $(RED); echo "WARNING: $$1"; printf $(NC)' MESSAGE

# Image and Repository Tag introspection functions
# Syntax: $(call get_image_id,<docker-compose-environment>,<service-name>)
# Syntax: $(call get_repo_tags,<docker-compose-environment>,<service-name>,<fully-qualified-image-name>)
get_container_id = $$(docker-compose $(1) ps -q $(2) 2>/dev/null)
get_image_id = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ARGS docker inspect -f '{{ .Image }}' ARGS)
get_container_state = $$(echo $(call get_container_id,$(1),$(2)) | xargs -I ID docker inspect -f '$(3)' ID)

# Port introspection functions
# Syntax: $(call get_port_mapping,<docker-compose-environment>,<service-name>,<internal-port>)
get_raw_port_mapping = $$(docker-compose $(1) ps -q $(2) | xargs -I ID docker port ID $(3))
get_port_mapping = $$(echo $$(IFS=':' read -r -a array <<< "$(call get_raw_port_mapping,$(1),$(2),$(3))" && echo "$${array[1]}"))

# Service health functions
# Syntax: $(call check_service_health,<docker-compose-environment>,<service-name>)
get_service_health = $$(echo $(call get_container_state,$(1),$(2),{{if .State.Running}}{{ .State.Health.Status }}{{end}}))
check_service_health = { \
  until [[ $(call get_service_health,$(1),$(2)) != starting ]]; \
    do sleep 1; \
  done; \
  if [[ $(call get_service_health,$(1),$(2)) != healthy ]]; \
    then echo $(2) failed health check; exit 1; \
  fi; \
}

# Exit code function
# Syntax: $(call get_exit_code,<docker-compose-environment>,<service-name>)
get_exit_code = $$(echo $(call get_container_state,$(1),$(2),{{ .State.ExitCode }}))
check_exit_code = exit $(call get_exit_code,$(1),$(2))

# Dangling image function
# Syntax: $(call clean_dangling_images,<repository>)
clean_dangling_images = docker images -q -f dangling=true -f label=application=$(1) | xargs -I ARGS docker rmi -f ARGS || true
